trigger:
- master
- develop
- release/*

# Don't trigger for a pull request
pr: none

# Schedule to run overnight
schedules:
- cron: "0 20 * * *"
  displayName: Daily overnight build
  branches:
    include:
    - develop
    
variables:
  - group: CertificateVariables
  # Access token for the git repository. Used by the git tag task.
  - name: system_accesstoken
    value: $(System.AccessToken)
  # Include shared variables
  - template: shared-variables.yml
  
stages:

- template: shared-build-and-test-platforms.yml
  parameters:
    windowsImage: $(windowsImage)
    linuxImage: $(linuxImage)
    macImage: $(macImage)

- stage: Build_Packages
  displayName: Build Packages
  dependsOn: [Windows,Linux,MacOS]
  jobs:
  - job: Create_Packages
    displayName: Create Packages
     
    pool:
      vmImage: $(linuxImage)

    steps:
    - checkout: self
      submodules: recursive
      lfs: false
      # The line below are needed to allow the pipeline access to the
      # OAuth access token that controls write access to the git repository.
      # (Required for GitTag task)
      persistCredentials: true
      clean: true

    - task: gittools.gitversion.gitversion-task.GitVersion@5
      displayName: GitVersion
      inputs:
        preferBundledVersion: true
        failOnStderr: true
        
    # The secure file to download will be stored in the
    # Pipelines/Library/SecureFiles section in Azure DevOps.
    - task: DownloadSecureFile@1
      displayName: 'Download Code Signing Certificate'
      name: CodeSigningCert
      inputs:
        secureFile: '51Degrees Code Signing Certificate.asc'
      continueOnError: true
    - task: Bash@3
      displayName: 'Import Code Signing Certificate'
      inputs:
        targetType: 'inline'
        script: 'echo $(gpg_passphrase) | gpg --import --batch --yes --passphrase-fd 0 "$(CodeSigningCert.secureFilePath)"'
        
    - task: Maven@2
      displayName: 'Maven version set'
      inputs:
        goals: 'versions:set'
        options: '-DnewVersion=$(GitVersion.SemVer)'
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        mavenAuthenticateFeed: false

    - task: Maven@1
      displayName: 'Maven install'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean install'
        options: '-Pbuild -Dhttps.protocols=TLSv1.2 -Dbuildversion=$(GitVersion.SemVer) -Dskippackagesign=false -Dgpg.passphrase=$(gpg_passphrase)'
        jdkVersionOption: $(jdkVersionDefault)

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: '**/*'
        TargetFolder: '$(build.artifactstagingdirectory)'

    - task: Bash@3
      displayName: 'Write GitVersion to version.txt'
      inputs:
        targetType: 'inline'
        script: 'echo $(GitVersion.SemVer) >> version.txt'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: 'version.txt'
        TargetFolder: '$(build.artifactstagingdirectory)'
        failOnStderr: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        failOnStderr: true
        
    # Add a tag to the git repository with the version number of
    # the package that has just been published
    - task: ATP.ATP-GitTag.GitTag.GitTag@5
      displayName: 'Tag Repo With Version Number'
      inputs:
        tagUser: 'Azure DevOps'
        tagEmail: 'CIUser@51Degrees.com'
        failOnStderr: true
      # Only create the tag if we also published a package as defined in
      # the previous task.
      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), eq('true', variables['ForcePushMaven'])))))

